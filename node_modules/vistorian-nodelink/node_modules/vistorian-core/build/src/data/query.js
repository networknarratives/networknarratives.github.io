import { Link, Location, Node, NodePair, Time, } from "./dynamicgraph";
export function attributeSort(a, b, attributeName, asc) {
    const value = a.attr(attributeName);
    let result;
    if (typeof value == "string") {
        result = a.attr(attributeName).localeCompare(b.attr(attributeName));
    }
    else if (typeof value == "number") {
        result = b.attr(attributeName) - a.attr(attributeName);
    }
    else {
        result = 0;
    }
    if (asc == false) {
        result = -result;
    }
    return result;
}
function getBulkAttributes(attrName, ids, type, g, t1, t2) {
    let a = [];
    let temp;
    for (let i = 0; i < ids.length; i++) {
        if (t2 != undefined && t1 != undefined) {
            temp = g.attr(attrName, ids[i], type)
                .period(t1, t2)
                .toArray();
        }
        else if (t1 != undefined) {
            temp = [
                g.attr(attrName, ids[i], type).get(t1),
            ];
        }
        else {
            temp = (g.attr(attrName, ids[i], type)).toArray();
        }
        for (let j = 0; j < temp.length; j++) {
            if (temp[j] instanceof Array) {
                a = a.concat(temp[j]);
            }
            else {
                if (a.indexOf(temp[j]) == -1)
                    a.push(temp[j]);
            }
        }
    }
    return a;
}
export class Query {
    constructor(elements) {
        this._elements = [];
        if (elements) {
            for (let i = 0; i < elements.length; i++) {
                if (elements[i] != undefined)
                    this._elements.push(elements[i]);
            }
        }
    }
    // contains(element: number): boolean {
    //     return this._elements.indexOf(element) > -1;
    // }
    addUnique(element) {
        if (this._elements.indexOf(element) == -1)
            this._elements.push(element);
    }
    add(element) {
        this._elements.push(element);
    }
    addAll(elements) {
        for (let i = 0; i < elements.length; i++) {
            if (elements[i] != undefined)
                this._elements.push(elements[i]);
        }
    }
    addAllUnique(elements) {
        for (let i = 0; i < elements.length; i++) {
            this.addUnique(elements[i]);
        }
    }
    /** @returns numbr of elements in this query. Same as size(). */
    get length() {
        return this._elements.length;
    }
    /** @returns numbr of elements in this query. Same as length getter. */
    size() {
        return this._elements.length;
    }
    /** @returns all ids in this query. */
    ids() {
        return this._elements;
    }
    removeDuplicates() {
        const elements = this._elements.slice(0);
        this._elements = [];
        for (let i = 0; i < elements.length; i++) {
            if (this._elements.indexOf(elements[i]) == -1)
                this._elements.push(elements[i]);
        }
        return this;
    }
    generic_intersection(q) {
        const intersection = [];
        for (let i = 0; i < this._elements.length; i++) {
            for (let j = 0; j < q._elements.length; j++) {
                if (this._elements[i] == q._elements[j]) {
                    intersection.push(this._elements[i]);
                }
            }
        }
        return new Query(intersection);
    }
}
export class GraphElementQuery extends Query {
    constructor(elements, g, elementType) {
        super(elements);
        this.g = g;
        this.elementType = elementType;
    }
    /** @returns a query that contains only the elements matching
     * the filter critera;
     * @param attribute - name of attribute that is used on filter
     * @param filter - function evaluating if the attribute's value is valid.
     */
    generic_filter(filter) {
        const arr = [];
        for (let i = 0; i < this._elements.length; i++) {
            try {
                if (filter(this.g.get(this.elementType, this._elements[i]))) {
                    arr.push(this._elements[i]);
                }
            }
            catch (ex) {
                // TODO: catch this exception?
            }
        }
        return arr;
    }
    /** @returns a query with selected elements, i.e. elements that are in at least
     * one selection.
     */
    generic_selected() {
        const arr = [];
        for (let i = 0; i < this._elements.length; i++) {
            const element = this.g.get(this.elementType, this._elements[i]);
            if (element != undefined && element.isSelected()) {
                arr.push(this._elements[i]);
            }
        }
        return arr;
    }
    /** @returns a query with visible elements.
     */
    generic_visible() {
        const arr = [];
        for (let i = 0; i < this._elements.length; i++) {
            const element = this.g.get(this.elementType, this._elements[i]);
            if (element != undefined && element.isVisible()) {
                arr.push(this._elements[i]);
            }
        }
        return arr;
    }
    /** @returns a query with highighted elements.
     */
    generic_highlighted() {
        const arr = [];
        for (let i = 0; i < this._elements.length; i++) {
            const element = this.g.get(this.elementType, this._elements[i]);
            if (element != undefined && element.isHighlighted()) {
                arr.push(this._elements[i]);
            }
        }
        return arr;
    }
    /** @returns a query with only the elements present in the specified time step
     * or period.
     */
    generic_presentIn(start, end) {
        const arr = [];
        for (let i = 0; i < this._elements.length; i++) {
            const element = this.g.get(this.elementType, this._elements[i]);
            if (element != undefined && element.presentIn(start, end)) {
                arr.push(this._elements[i]);
            }
        }
        return arr;
    }
    /** @returns this query with elements sorted */
    generic_sort(attrName, asc) {
        if (this._elements.length == 0) {
            return this;
        }
        const array = this._elements.slice(0);
        // ITS POSSIBLE AN UNDEFINED VALUE??
        array.sort((e1, e2) => {
            const e1_get = this.g.get(this.elementType, e1);
            const e2_get = this.g.get(this.elementType, e2);
            if (e1_get != undefined && e2_get != undefined) {
                return attributeSort(e1_get, e2_get, attrName, asc);
            }
            else if (e1_get == undefined && e2_get == undefined) {
                return 0;
            }
            return e1_get == undefined ? 1 : -1;
        });
        this._elements = array;
        return this;
    }
    generic_removeDuplicates() {
        const uniqueElements = [];
        for (let i = 0; i < this._elements.length; i++) {
            // for(var j=i+1 ; j <this._elements.length ; j++){
            //     if(this._elements[i]==this._elements[j])
            //         this._elements.slice(j,1);
            // }
            if (uniqueElements.indexOf(this._elements[i]) == -1)
                uniqueElements.push(this._elements[i]);
        }
        this._elements = uniqueElements;
        return this;
    }
}
export class TimeQuery extends GraphElementQuery {
    //elementType = 'time';
    constructor(elements, g) {
        super(elements, g, "time");
        //this.elementType = 'time';
        if (elements.length > 0 && elements[0] instanceof Time) {
            this._elements = [];
            for (let i = 0; i < elements.length; i++) {
                this._elements.push(elements[i].id());
            }
        }
        if (elements.length > 0 && typeof elements[0] == "number") {
            this._elements = [];
            for (let i = 0; i < elements.length; i++) {
                this._elements.push(elements[i]);
            }
        }
    }
    contains(t) {
        return this._elements.indexOf(t.id()) > -1;
    }
    highlighted() {
        return new TimeQuery(super.generic_highlighted(), this.g);
    }
    visible() {
        return new TimeQuery(super.generic_visible(), this.g);
    }
    selected() {
        return new TimeQuery(super.generic_selected(), this.g);
    }
    filter(filter) {
        return new TimeQuery(super.generic_filter(filter), this.g);
    }
    presentIn(t1, t2) {
        return new TimeQuery(super.generic_presentIn(t1, t2), this.g);
    }
    sort(attributeName) {
        return super.generic_sort(attributeName);
    }
    links() {
        let links = [];
        // var allLinks = this.g.links().toArray();
        // var allTimes = this.g.times().toArray();
        // for(var i=0 ; i<allLinks.length ; i++){
        // for(var j=0 ; j<allTimes.length ; j++){
        //     if(allLinks[i].presentIn(allTimes[j])){
        //         links.push(allLinks[i].id());
        //         break
        //     }
        // }
        // }
        for (let i = 0; i < this._elements.length; i++) {
            links = links.concat(this.g.attr("links", this._elements[i], "time"));
        }
        return new LinkQuery(links, this.g);
    }
    // returns the i-th element in this query
    get(i) {
        return this.g._times[this._elements[i]];
    }
    last() {
        return this.g._times[this._elements[this._elements.length - 1]];
    }
    // return array of times
    toArray() {
        const a = [];
        const allTimes = this.g._times;
        for (let i = 0; i < this._elements.length; i++) {
            a.push(allTimes[this._elements[i]]);
        }
        return a;
    }
    createAttribute(attrName, f) {
        // create and init new attribute array if necessary
        if (this.g.timeArrays[attrName] == undefined) {
            this.g.timeArrays[attrName] = [];
            for (let i = 0; i < this.g._times.length; i++) {
                this.g.timeArrays[attrName].push();
            }
        }
        for (let i = 0; i < this._elements.length; i++) {
            this.g.timeArrays[attrName][this._elements[i]] = f(this.g._times[this._elements[i]]);
        }
        return this;
    }
    unixTimes() {
        const unixTimes = [];
        for (let i = 0; i < this._elements.length; i++) {
            const time = this.g.time(this._elements[i]); // UNDEFINED ??
            if (time != undefined) {
                unixTimes.push(time.unixTime());
            }
        }
        return unixTimes;
    }
    intersection(q) {
        return new TimeQuery(this.generic_intersection(q)._elements, this.g);
    }
    forEach(f) {
        for (let i = 0; i < this._elements.length; i++) {
            f(this.g.time(this._elements[i]), i);
        }
        return this;
    }
}
export class LocationQuery extends GraphElementQuery {
    // elementType = 'location';
    constructor(elements, g) {
        super(elements, g, "location");
        // this.elementType = 'location';
        if (elements.length > 0 && elements[0] instanceof Location) {
            this._elements = [];
            for (let i = 0; i < elements.length; i++) {
                this._elements = elements[i].id();
            }
        }
        if (elements.length > 0 && typeof elements[0] == "number") {
            this._elements = [];
            for (let i = 0; i < elements.length; i++) {
                this._elements.push(elements[i]);
            }
        }
    }
    contains(l) {
        return this._elements.indexOf(l.id()) > -1;
    }
    highlighted() {
        return new LocationQuery(super.generic_highlighted(), this.g);
    }
    visible() {
        return new LocationQuery(super.generic_visible(), this.g);
    }
    selected() {
        return new LocationQuery(super.generic_selected(), this.g);
    }
    filter(filter) {
        return new LocationQuery(super.generic_filter(filter), this.g);
    }
    presentIn(t1, t2) {
        return new LocationQuery(super.generic_presentIn(t1, t2), this.g);
    }
    sort(attributeName) {
        return super.generic_sort(attributeName);
    }
    // returns the i-th element in this query
    get(i) {
        return this.g._locations[this._elements[i]];
    }
    last() {
        return this.g._locations[this._elements[this._elements.length - 1]];
    }
    // return array of locations
    toArray() {
        const a = [];
        for (let i = 0; i < this._elements.length; i++) {
            a.push(this.g._locations[this._elements[i]]);
        }
        return a;
    }
    createAttribute(attrName, f) {
        // create and init new attribute array if necessary
        if (this.g.locationArrays[attrName] == undefined) {
            this.g.locationArrays[attrName] = [];
            for (let i = 0; i < this.g._locations.length; i++) {
                this.g.locationArrays[attrName].push();
            }
        }
        for (let i = 0; i < this._elements.length; i++) {
            this.g.locationArrays[attrName][this._elements[i]] = f(this.g._locations[this._elements[i]]);
        }
        return this;
    }
    intersection(q) {
        return new LocationQuery(this.generic_intersection(q)._elements, this.g);
    }
    removeDuplicates() {
        return new LocationQuery(this.generic_removeDuplicates()._elements, this.g);
    }
    forEach(f) {
        for (let i = 0; i < this._elements.length; i++) {
            f(this.g.location(this._elements[i]), i);
        }
        return this;
    }
}
export class NodePairQuery extends GraphElementQuery {
    //elementType = 'nodePair';
    constructor(elements, g) {
        super(elements, g, "nodePair");
        //this.elementType = 'nodePair';
        if (elements.length > 0 && elements[0] instanceof NodePair) {
            this._elements = [];
            for (let i = 0; i < elements.length; i++) {
                this._elements.push(elements[i].id());
            }
        }
        if (elements.length > 0 && typeof elements[0] == "number") {
            this._elements = [];
            for (let i = 0; i < elements.length; i++) {
                this._elements.push(elements[i]);
            }
        }
    }
    contains(n) {
        return this._elements.indexOf(n.id()) > -1;
    }
    highlighted() {
        return new NodePairQuery(super.generic_highlighted(), this.g);
    }
    visible() {
        return new NodePairQuery(super.generic_visible(), this.g);
    }
    selected() {
        return new NodePairQuery(super.generic_selected(), this.g);
    }
    filter(filter) {
        return new NodePairQuery(super.generic_filter(filter), this.g);
    }
    presentIn(t1, t2) {
        return new NodePairQuery(super.generic_presentIn(t1, t2), this.g);
    }
    sort(attributeName) {
        return super.generic_sort(attributeName);
    }
    // returns the i-th element in this query
    get(i) {
        return this.g._nodePairs[this._elements[i]];
    }
    last() {
        return this.g._links[this._elements[this._elements.length - 1]];
    }
    // returns array of NodePair
    toArray() {
        const a = [];
        for (let i = 0; i < this._elements.length; i++) {
            a.push(this.g._nodePairs[this._elements[i]]);
        }
        return a;
    }
    createAttribute(attrName, f) {
        // create and init new attribute array if necessary
        if (this.g.nodePairArrays[attrName] == undefined) {
            this.g.nodePairArrays[attrName] = [];
            for (let i = 0; i < this.g._nodePairs.length; i++) {
                this.g.nodePairArrays[attrName].push();
            }
        }
        for (let i = 0; i < this._elements.length; i++) {
            this.g.nodePairArrays[attrName][this._elements[i]] = f(this.g._nodePairs[this._elements[i]]);
        }
        return this;
    }
    intersection(q) {
        return new NodePairQuery(this.generic_intersection(q)._elements, this.g);
    }
    removeDuplicates() {
        return new NodePairQuery(this.generic_removeDuplicates()._elements, this.g);
    }
    forEach(f) {
        for (let i = 0; i < this._elements.length; i++) {
            f(this.g.nodePair(this._elements[i]), i);
        }
        return this;
    }
}
/**
 * Represents a simple array of numbers that can be used to calculate
 * max, mean, min values etc..
 */
export class NumberQuery extends Query {
    clone() {
        return this._elements.slice(0);
    }
    min() {
        this._elements = this.makeNumbers(this._elements);
        let min = parseInt(this._elements[0] + "");
        for (let i = 1; i < this._elements.length; i++) {
            if (this._elements[i] != undefined)
                min = Math.min(min, parseInt(this._elements[i] + ""));
        }
        return min;
    }
    max() {
        let max = parseInt(this._elements[0] + "");
        for (let i = 1; i < this._elements.length; i++) {
            if (this._elements[i] != undefined)
                max = Math.max(max, parseInt(this._elements[i] + ""));
        }
        return max;
    }
    mean() {
        this._elements = this.makeNumbers(this._elements);
        let v = 0;
        let count = 0;
        for (let i = 0; i < this._elements.length; i++) {
            if (typeof this._elements[i] == "number") {
                v += parseInt(this._elements[i] + "");
                count++;
            }
        }
        return v / count;
    }
    sum() {
        let sum = 0;
        for (let i = 0; i < this._elements.length; i++) {
            if (typeof this._elements[i] == "number") {
                sum += parseInt(this._elements[i] + "");
            }
        }
        return sum;
    }
    toArray() {
        return this._elements.slice(0);
    }
    get(index) {
        return this._elements[index];
    }
    forEach(f) {
        for (let i = 0; i < this._elements.length; i++) {
            f(this._elements[i], i);
        }
        return this;
    }
    makeNumbers(elements) {
        if (elements && elements.length > 0) {
            const first = elements[0];
            if (typeof first == "string") {
                const numberElements = [];
                for (let i = 0; i < elements.length; i++) {
                    numberElements.push(parseFloat(elements[i] + ""));
                }
                console.log("string array converted", numberElements);
                return numberElements;
            }
        }
        return elements;
    }
}
export class StringQuery {
    constructor(elements) {
        if (elements)
            this._elements = elements.slice(0);
        else
            this._elements = []; // INIT WHEN ELEMENTS DOESN'T EXIST
    }
    contains(element) {
        return this._elements.indexOf(element) > -1;
    }
    addUnique(element) {
        if (this._elements.indexOf(element) == -1)
            this._elements.push(element);
    }
    add(element) {
        this._elements.push(element);
    }
    addAll(elements) {
        for (let i = 0; i < elements.length; i++) {
            if (elements[i] != undefined)
                this._elements.push(elements[i]);
        }
    }
    addAllUnique(elements) {
        for (let i = 0; i < elements.length; i++) {
            this.addUnique(elements[i]);
        }
    }
    get length() {
        return this._elements.length;
    }
    size() {
        return this._elements.length;
    }
    toArray() {
        return this._elements.slice(0);
    }
    forEach(f) {
        for (let i = 0; i < this._elements.length; i++) {
            f(this._elements[i], i);
        }
        return this;
    }
}
export class NodeQuery extends GraphElementQuery {
    // elementType = 'node';
    constructor(elements, g) {
        super(elements, g, "node");
        if (elements.length > 0 && elements[0] instanceof Node) {
            this._elements = [];
            for (let i = 0; i < elements.length; i++) {
                this._elements.push(elements[i].id());
            }
        }
        else if (elements.length > 0 && typeof elements[0] == "number") {
            this._elements = [];
            for (let i = 0; i < elements.length; i++) {
                this._elements.push(elements[i]);
            }
        }
        // this.elementType = 'node';
    }
    contains(n) {
        return this._elements.indexOf(n.id()) > -1;
    }
    // WRAPPERS TO GENERIC FUNCTIONS IN GRAPH_ELEMENT_QUERY
    highlighted() {
        return new NodeQuery(super.generic_highlighted(), this.g);
    }
    visible() {
        return new NodeQuery(super.generic_visible(), this.g);
    }
    selected() {
        return new NodeQuery(super.generic_selected(), this.g);
    }
    filter(filter) {
        return new NodeQuery(super.generic_filter(filter), this.g);
    }
    presentIn(t1, t2) {
        return new NodeQuery(super.generic_presentIn(t1, t2), this.g);
    }
    sort(attributeName, asc) {
        return super.generic_sort(attributeName, asc);
    }
    // proper functions
    label() {
        const q = new StringQuery();
        for (let i = 0; i < this._elements.length; i++) {
            q.add("" + this.g.attr("label", this._elements[i], "node"));
        }
        return q;
    }
    neighbors(t1, t2) {
        return new NodeQuery(getBulkAttributes("neighbors", this._elements, "node", this.g, t1, t2), this.g);
    }
    links(t1, t2) {
        return new LinkQuery(getBulkAttributes("links", this._elements, "node", this.g, t1, t2), this.g);
    }
    locations(t1, t2) {
        return new LocationQuery(getBulkAttributes("locations", this._elements, "node", this.g, t1, t2), this.g);
    }
    nodeTypes() {
        const q = new StringQuery();
        for (let i = 0; i < this._elements.length; i++) {
            q.add(this.g.attr("nodeType", this._elements[i], "node"));
        }
        return q;
    }
    // returns the i-th element in this query
    get(i) {
        return this.g._nodes[this._elements[i]];
    }
    last() {
        return this.g._nodes[this._elements[this._elements.length - 1]];
    }
    // returns array of nodes
    toArray() {
        const a = [];
        for (let i = 0; i < this._elements.length; i++) {
            a.push(this.g._nodes[this._elements[i]]);
        }
        return a;
    }
    createAttribute(attrName, f) {
        // create and init news attribute array if necessary
        if (this.g.nodeArrays[attrName] == undefined) {
            this.g.nodeArrays[attrName] = [];
            for (let i = 0; i < this.g._nodes.length; i++) {
                this.g.nodeArrays[attrName].push();
            }
        }
        for (let i = 0; i < this._elements.length; i++) {
            this.g.nodeArrays[attrName][this._elements[i]] = f(this.g._nodes[this._elements[i]]);
        }
        return this;
    }
    intersection(q) {
        return new NodeQuery(this.generic_intersection(q)._elements, this.g);
    }
    removeDuplicates() {
        return new NodeQuery(this.generic_removeDuplicates()._elements, this.g);
    }
    forEach(f) {
        for (let i = 0; i < this._elements.length; i++) {
            f(this.g.node(this._elements[i]), i);
        }
        return this;
    }
}
export class LinkQuery extends GraphElementQuery {
    //elementType = 'link';
    constructor(elements, g) {
        super(elements, g, "link");
        if (elements.length > 0 && elements[0] instanceof Link) {
            this._elements = [];
            for (let i = 0; i < elements.length; i++) {
                this._elements.push(elements[i].id());
            }
        }
        if (elements.length > 0 && typeof elements[0] == "number") {
            this._elements = [];
            for (let i = 0; i < elements.length; i++) {
                this._elements.push(elements[i]);
            }
        }
    }
    contains(l) {
        return this._elements.indexOf(l.id()) > -1;
    }
    highlighted() {
        return new LinkQuery(super.generic_highlighted(), this.g);
    }
    visible() {
        return new LinkQuery(super.generic_visible(), this.g);
    }
    selected() {
        return new LinkQuery(super.generic_selected(), this.g);
    }
    filter(filter) {
        return new LinkQuery(super.generic_filter(filter), this.g);
    }
    presentIn(t1, t2) {
        return new LinkQuery(super.generic_presentIn(t1, t2), this.g);
    }
    sort(attributeName) {
        return super.generic_sort(attributeName);
    }
    // returns the i-th element in this query
    get(i) {
        return this.g._links[this._elements[i]];
    }
    last() {
        return this.g._links[this._elements[this._elements.length - 1]];
    }
    // returns array of links
    toArray() {
        const a = [];
        for (let i = 0; i < this._elements.length; i++) {
            a.push(this.g._links[this._elements[i]]);
        }
        return a;
    }
    weights(start, end) {
        const s = new NumberQuery();
        for (let i = 0; i < this._elements.length; i++) {
            const gLink = this.g.link(i);
            if (gLink != undefined)
                s.addAll(gLink.weights(start, end).toArray());
            // ELSE ???
        }
        return s;
    }
    createAttribute(attrName, f) {
        // create and init new attribute array if necessary
        if (this.g.linkArrays[attrName] == undefined) {
            this.g.linkArrays[attrName] = [];
            for (let i = 0; i < this.g._links.length; i++) {
                this.g.linkArrays[attrName].push();
            }
        }
        for (let i = 0; i < this._elements.length; i++) {
            this.g.linkArrays[attrName][this._elements[i]] = f(this.g._links[this._elements[i]]);
        }
        return this;
    }
    linkTypes() {
        const linkTypes = [];
        let s;
        for (let i = 0; i < this._elements.length; i++) {
            const gLink = this.g.link(this._elements[i]);
            if (gLink != undefined) {
                s = gLink.linkType();
                if (linkTypes.indexOf(s) == -1)
                    linkTypes.push(s);
            }
            // ELSE ??
        }
        return linkTypes;
    }
    sources() {
        const nodes = [];
        let link;
        for (let i = 0; i < this._elements.length; i++) {
            link = this.g.link(this._elements[i]);
            if (link != undefined) {
                // UNDEFINED??
                if (nodes.indexOf(link.source.id()) == -1)
                    // ID??
                    nodes.push(link.source.id());
            }
        }
        return new NodeQuery(nodes, this.g);
    }
    targets() {
        const nodes = [];
        let link;
        for (let i = 0; i < this._elements.length; i++) {
            link = this.g.link(this._elements[i]);
            if (link != undefined) {
                // UNDEFINED??
                if (nodes.indexOf(link.target.id()) == -1)
                    // ID??
                    nodes.push(link.target.id());
            }
        }
        return new NodeQuery(nodes, this.g);
    }
    intersection(q) {
        return new LinkQuery(this.generic_intersection(q)._elements, this.g);
    }
    removeDuplicates() {
        return new LinkQuery(this.generic_removeDuplicates()._elements, this.g);
    }
    forEach(f) {
        for (let i = 0; i < this._elements.length; i++) {
            f(this.g.link(this._elements[i]), i);
        }
        return this;
    }
}
//# sourceMappingURL=query.js.map