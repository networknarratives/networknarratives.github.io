import { BasicElement, DataManager, GraphElementQuery, IDCompound, Link, LinkArray, LinkQuery, LinkTypeArray, Location, LocationArray, LocationQuery, Node, NodeArray, NodePair, NodePairArray, NodePairQuery, NodeQuery, NodeTypeArray, Ordering, Time, TimeArray, TimeQuery } from "./dynamicgraph";
import { Selection } from "./datamanager";
import { DataSet } from "./datamanager";
export declare class DynamicGraph {
    private default_colors;
    BOOKMARK_COLORS: (i: number) => string;
    selectionColor_pointer: number;
    name: string;
    gran_min: number;
    gran_max: number;
    minWeight: number;
    maxWeight: number;
    _nodes: Node[];
    _links: Link[];
    directed: boolean;
    _nodePairs: NodePair[];
    _locations: Location[];
    _times: Time[];
    timeObjects: any[];
    nodeOrders: Ordering[];
    matrix: number[][];
    selections: Selection[];
    nodeArrays: NodeArray;
    linkArrays: LinkArray;
    nodePairArrays: NodePairArray;
    timeArrays: TimeArray;
    linkTypeArrays: LinkTypeArray;
    nodeTypeArrays: NodeTypeArray;
    locationArrays: LocationArray;
    attributeArrays: Record<string, any>;
    highlightArrays: IDCompound;
    currentSelection_id: number;
    defaultLinkSelection: Selection;
    defaultNodeSelection: Selection;
    attr(field: string, id: number, type: string): any;
    gran_min_NAME: string;
    gran_max_NAME: string;
    directed_NAME: string;
    minWeight_NAME: string;
    maxWeight_NAME: string;
    matrix_NAME: string;
    nodeArrays_NAME: string;
    linkArrays_NAME: string;
    nodePairArrays_NAME: string;
    timeArrays_NAME: string;
    linkTypeArrays_NAME: string;
    nodeTypeArrays_NAME: string;
    locationArrays_NAME: string;
    standardArrayReplacer(key: string, value: any): any;
    static timeReviver(k: string, v: any, s: DynamicGraph): any;
    static nodeArrayReviver(k: string, v: any, s: DynamicGraph): any;
    static linkArrayReviver(k: string, v: any, s: DynamicGraph): any;
    static nodePairArrayReviver(k: string, v: any, s: DynamicGraph): any;
    static timeArrayReviver(k: string, v: any, s: DynamicGraph): any;
    static linkTypeArrayReviver(k: string, v: any, s: DynamicGraph): any;
    static nodeTypeArrayReviver(k: string, v: any, s: DynamicGraph): any;
    static locationArrayReviver(k: string, v: any, s: DynamicGraph): any;
    loadDynamicGraph(dataMgr: DataManager, dataSetName: string): void;
    saveDynamicGraph(dataMgr: DataManager): void;
    delete(dataMgr: DataManager): void;
    debugCompareTo(other: DynamicGraph): boolean;
    initDynamicGraph(data: DataSet): void;
    createSelections(shouldCreateArrays: boolean): void;
    /**
     *
     * Returns a window graph for the passed time point
     * or period
     * @param  {any}    start First time point of this graph
     * @param  {any}    end   Last time point of this graph.
     * @return {[type]}       [description]
     */
    private createGraphObjects;
    nodeAttr(attr: string, id: number): any;
    linkAttr(attr: string, id: number): any;
    pairAttr(attr: string, id: number): any;
    timeAttr(attr: string, id: number): any;
    get startTime(): Time;
    get endTime(): Time;
    highlight(action: string, idCompound?: IDCompound): void;
    selection(action: string, idCompound: IDCompound, selectionId?: number): void;
    addToAttributeArraysSelection(selection: Selection, type: string, id: number): void;
    removeFromAttributeArraysSelection(selection: Selection, type: string, id: number): void;
    addElementToSelection(selection: Selection, e: BasicElement): void;
    addToSelectionByTypeAndId(selection: Selection, type: string, id: number): void;
    removeElementFromSelection(selection: Selection, e: BasicElement): void;
    removeFromSelectionByTypeAndId(selection: Selection, type: string, id: number): void;
    getSelectionsByTypeAndId(type: string, id: number): Selection[];
    filterSelection(selectionId: number, filter: boolean): void;
    isFiltered(id: number, type: string): boolean;
    isHighlighted(id: number, type: string): boolean;
    getHighlightedIds(type: string): any;
    setCurrentSelection(id: number): void;
    getCurrentSelection(): Selection | undefined;
    addSelection(id: number, color: string, acceptedType: string, priority: number): void;
    createSelection(type: string): Selection;
    deleteSelection(selectionId: number): void;
    setSelectionColor(id: number, color: string): void;
    getSelections(type?: string): Selection[];
    getSelection(id: number): Selection | undefined;
    clearSelections(): void;
    getTimeIdForUnixTime(unixTime: number): number | undefined;
    addNodeOrdering(name: string, order: number[]): void;
    setNodeOrdering(name: string, order: number[]): void;
    removeNodeOrdering(name: string, order: number[]): void;
    getNodeOrder(name: string): Ordering | undefined;
    nodes(): NodeQuery;
    links(): LinkQuery;
    times(): TimeQuery;
    locations(): LocationQuery;
    nodePairs(): NodePairQuery;
    linksBetween(n1: Node, n2: Node): LinkQuery;
    get(type: string, id: number): BasicElement | undefined;
    getAll(type: string): GraphElementQuery;
    node(id: number): Node | undefined;
    link(id: number): Link | undefined;
    time(id: number): Time | undefined;
    location(id: number): Location | undefined;
    nodePair(id: number): NodePair | undefined;
    getMinGranularity(): number;
    getMaxGranularity(): number;
}
